version: '3'
services:

  ml-scheduler:
    build: 
      dockerfile: ./RetrainScheduler.dockerfile
    volumes:
      - ./ML_dir:/code/app
    working_dir: /node/app
    command: cron -f
    depends_on:
      - mlflow-server
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    devices:
      - /dev/nvidia0:/dev/nvidia0
      - /dev/nvidiactl:/dev/nvidiactl
      - /dev/nvidia-modeset:/dev/nvidia-modeset
      - /dev/nvidia-uvm:/dev/nvidia-uvm
      - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools

  vue-frontend:
    build:
      dockerfile: ./Vue_App.dockerfile
    volumes:
      - ./kg_recsys_proj_vue:/node/app
    working_dir: /node/app
    command: npm run serve
    ports:
      - "8080:8080"
    depends_on: 
      - django-backend
    environment:
      VUE_APP_DJANGO_ENDPOINT:  http://django-backend:8000 #http://django-backend:8000 

  django-backend:
    build:
      dockerfile: ./Django_App.dockerfile
    volumes:
      - ./kg_recsys_proj:/code
      - ./ML_dir:/ML_dir
    working_dir: /code
    command:  
      sh -c "python manage.py install_labels &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      neo4j-db:
        condition: service_healthy
      mlflow-server:
        condition: service_healthy

    environment:
      NEO4J_BOLT_URL: bolt://neo4j:pass@neo4j-db:7687 #bolt://neo4j:pass@db-bridge:7687
      VUE_ORIGIN: http://vue-frontend:8080 #http://vue-frontend:8080 #
  

  neo4j-db:
    build:
      dockerfile: ./NeoDB.dockerfile 
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ${HOME}/neo4j-compose2/data:/data
    environment:
        - NEO4J_AUTH=none

    healthcheck:
        test: ["CMD", "curl", "-f", "localhost:7474"]
        interval: 10s
        timeout: 5s
        retries: 5
  
  mlflow-server:
    build:
      dockerfile: ./MLFlowServer.dockerfile
    volumes:
      - ./MLFlowRegistry:/registry
    working_dir: /registry
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./artifacts --host 0.0.0.0
    ports:
      - "5000:5000"

    healthcheck:
      test: ["CMD", "echo"]
      interval: 10s
      timeout: 5s
      retries: 5
    



