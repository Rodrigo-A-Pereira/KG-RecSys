# Generated by Django 4.0.4 on 2022-04-26 17:53

from django.db import migrations
from neoapi.models import Card, Person
from mtgsdk import Card as MTGCard
from neomodel import db
import neomodel

import requests
from bs4 import BeautifulSoup

import json
import re
import names


def _scrape_deck(deck_url):
    page =  requests.get(f"https://aetherhub.com/{deck_url}")

    soup = BeautifulSoup(page.content, "html.parser")

    table = soup.find("div", { "class" : "card-body pl-0 pr-0" })

    cards_pre = table.findAll("div", {"class": "hover-imglink"})

    card_list = [re.split(r'\s{2,}', card.get_text().strip())[0:2] for card in cards_pre]

    return card_list



def _get_meta_decks():
    url = "https://aetherhub.com/Meta/FetchMetaListAdv"

    querystring = {"formatId":"1"}

    payload = "{\"draw\":1,\"columns\":[{\"data\":\"name\",\"name\":\"name\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"color\",\"name\":\"color\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"tags\",\"name\":\"tags\",\"searchable\":true,\"orderable\":false,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"rarity\",\"name\":\"rarity\",\"searchable\":true,\"orderable\":false,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"price\",\"name\":\"price\",\"searchable\":true,\"orderable\":false,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"views\",\"name\":\"views\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"exports\",\"name\":\"exports\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"updated\",\"name\":\"updated\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"7\",\"regex\":false}},{\"data\":\"updatedhidden\",\"name\":\"updatedhidden\",\"searchable\":false,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":\"popularity\",\"name\":\"popularity\",\"searchable\":false,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}}],\"order\":[{\"column\":9,\"dir\":\"desc\"}],\"start\":0,\"length\":40,\"search\":{\"value\":\"\",\"regex\":false}}"
    headers = {
        'user-agent': "Mozilla/5.0 (X11; Linux x86_64; rv:93.0) Gecko/20100101 Firefox/93.0",
        'accept': "application/json, text/javascript, */*; q=0.01",
        'accept-language': "en-US,en;q=0.5",
        'content-type': "application/json",
        'x-requested-with': "XMLHttpRequest",
        'origin': "https://aetherhub.com",
        'connection': "keep-alive",
        'referer': "https://aetherhub.com/Decks/Traditional-Standard/",
        'cookie': ".AspNetCore.Antiforgery.nixphHDAMN4=CfDJ8NGNd4RRP9hEuvvVDMSskF57nzembtn2XJLJtcYHWDQ3Lvy--iCB8yDKGINxCUKY9o14FsCFhtsHYkwLjDXmZ4At53p-r_bhKK28x0fts6jHpKXcYBt_KSep_SX6q-G_IyT9ynoNvOdqKKuCecdkYcQ; ARRAffinity=54b4413533596ff335c1a065a72a150099038c5e74a004bea873b8ff2a06234f; ARRAffinitySameSite=54b4413533596ff335c1a065a72a150099038c5e74a004bea873b8ff2a06234f; __stripe_mid=e405182b-98a1-4b31-97c8-6c960dae671767ce73; ah_cc_=ah; ah_ped_=706113; ah_pvt_=full; _dd_s=logs=1&id=946978ea-172e-4caf-ab49-b7b1f9bc8998&created=1651504657676&expire=1651505576731; __stripe_sid=5cc8ef30-998a-4647-97ca-9b61be5d650e233a5b; ah_mdf_=1",
        'sec-fetch-dest': "empty",
        'sec-fetch-mode': "cors",
        'sec-fetch-site': "same-origin",
        'cache-control': "no-cache",
        'te': "trailers",
        'postman-token': "ea75a125-bbc6-ef7f-a6e8-553f0e1185db"
        }

    response = requests.request("POST", url, data=payload, headers=headers, params=querystring)

    response_js = json.loads(response.text)
    

    metadecks_urls = [x["url"] for x in response_js["metadecks"]]

    return metadecks_urls
    

def populate_db(apps, schema_editor):

    if len(Card.nodes.all())==0:
            print('populating cards')
            #['ZNR', 'KHM', 'STX', 'AFR', 'MID', 'VOW', 'NEO']
            
            for set in ['ZNR', 'KHM', 'STX', 'AFR', 'MID', 'VOW', 'NEO', 'SNC']:
                for card in MTGCard.where(set=set).all():
                    if re.match("a-+", card.name, re.IGNORECASE) == None:
                        if Card.nodes.first_or_none(name=card.name) == None:
                            Card(code=card.id,name=card.name, r_set=card.set, image_url=card.image_url).save()
                   
            #(Card(code=card.id,name=card.name, r_set=card.set, price=1.0, image_url=card.image_url).save() for card in MTGCard.where(set=set).all() for set in ['ZNR', 'NEO'])

    if len(Person.nodes.all())==0:
        print('populating persons')
        list_of_decks = _get_meta_decks()

        p_names = [names.get_full_name() for x in range(len(list_of_decks))]

        for i, deck in enumerate(reversed(list_of_decks)):
            card_list = _scrape_deck(deck)

            try:
                person = Person.nodes.get(name=p_names[i])
            except neomodel.core.DoesNotExist:
                person = Person(name=p_names[i]).save()

            for card in card_list:
                try: 
                    card_node = Card.nodes.get(name=card[1])
                    person.card.connect(card_node)
                except neomodel.core.DoesNotExist:
                    try:
                        card_node = Card.nodes.get(name__istartswith=card[1])
                        person.card.connect(card_node)
                    except neomodel.core.DoesNotExist:
                        print(f"Error looking for card: {card[1]} on deck: {deck}")
                
                

        

def reset_db(apps, schema_editor):
    query = "MATCH (n) DETACH DELETE n"
    db.cypher_query(query)

class Migration(migrations.Migration):

    dependencies = [
        ('neoapi', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_db, reverse_code=reset_db)
    ]